new class{constructor(){this.fields=new Map,this.init()}init(){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>this.setup())):this.setup()}setup(){document.querySelectorAll("[data-hyperpress-conditional-logic]").forEach((e=>{try{const t=JSON.parse(e.getAttribute("data-hyperpress-conditional-logic")),a=this.getFieldName(e);a&&t&&this.fields.set(a,{element:e,logic:t})}catch(e){console.warn("Invalid conditional logic data:",e)}})),this.setupEventListeners(),this.evaluateAllFields()}getFieldName(e){const t=e.querySelector("input, select, textarea");if(t&&t.name){const e=t.name.match(/\[([^\]]+)\]$/);return e?e[1]:t.name}return null}setupEventListeners(){document.addEventListener("change",(e=>{e.target.matches("input, select, textarea")&&this.evaluateAllFields()})),document.addEventListener("input",(e=>{e.target.matches('input[type="text"], input[type="email"], input[type="url"], textarea')&&this.evaluateAllFields()}))}evaluateAllFields(){this.fields.forEach(((e,t)=>{this.evaluateField(t,e)}))}evaluateField(e,t){const{element:a,logic:r}=t;let n="AND",s=r;r&&"object"==typeof r&&r.relation&&(n=r.relation||"AND",s=r.rules||r),Array.isArray(s)||(s=[s]);const i=s.map((e=>this.evaluateCondition(e)));let l=!1;l="OR"===n.toUpperCase()?i.some((e=>!0===e)):i.every((e=>!0===e)),this.toggleField(a,l)}evaluateCondition(e){const{field:t,value:a,compare:r="=",operator:n}=e,s=r||n||"=";if(!t)return!1;let i;return t.startsWith("parent.")?(console.warn("Parent field references not yet implemented:",t),!1):(i=this.getFieldValue(t),this.compareValues(i,s,a))}compareValues(e,t,a){switch(t){case"=":case"==":default:return this.isEqual(e,a);case"!=":return!this.isEqual(e,a);case">":return parseFloat(e)>parseFloat(a);case"<":return parseFloat(e)<parseFloat(a);case">=":return parseFloat(e)>=parseFloat(a);case"<=":return parseFloat(e)<=parseFloat(a);case"IN":return!!Array.isArray(a)&&a.some((t=>this.isEqual(e,t)));case"NOT IN":return!Array.isArray(a)||!a.some((t=>this.isEqual(e,t)));case"INCLUDES":return Array.isArray(e)?Array.isArray(a)?a.every((t=>e.indexOf(t)>-1)):e.indexOf(a)>-1:String(e).includes(String(a));case"EXCLUDES":return Array.isArray(e)?Array.isArray(a)?a.every((t=>-1===e.indexOf(t))):-1===e.indexOf(a):!String(e).includes(String(a));case"contains":return String(e).includes(String(a));case"in":return!!Array.isArray(a)&&a.includes(e)}}isEqual(e,t){return"boolean"==typeof t?"boolean"==typeof e?e===t:("1"===e||1===e||"true"===e)===t:Array.isArray(e)?e.includes(t):String(e)===String(t)}getFieldValue(e){const t=[`[name="${e}"]`,`[name*="[${e}]"]`,`input[name="${e}"]`,`select[name="${e}"]`,`textarea[name="${e}"]`];for(const e of t){const t=document.querySelector(e);if(t)return this.extractValue(t)}return null}extractValue(e){if(!e)return null;switch(e.type){case"checkbox":return e.checked;case"radio":const t=document.querySelectorAll(`input[name="${e.name}"]`);for(const e of t)if(e.checked)return e.value;return null;case"select-multiple":return Array.from(e.selectedOptions).map((e=>e.value));default:return e.value}}toggleField(e,t){t?(e.style.display="",e.classList.remove("hyperpress-field-hidden")):(e.style.display="none",e.classList.add("hyperpress-field-hidden"))}};
